module.exports = {
	parser: "@typescript-eslint/parser",
	parserOptions: {
		project: "./tsconfig.json",
		sourceType: "module",
	},
	env: {
		node: true,
		browser: true,
		es6: true,
		jest: true,
	},
	extends: [
		// see region UNUSED
		// "eslint:all",
		// "plugin:import/errors",
		// "plugin:import/warnings",
		// "plugin:import/typescript",
		// "plugin:@typescript-eslint/all",
	],
	plugins: [
		"@typescript-eslint",
		"import",
		"simple-import-sort",
	],
	settings: {
		"import/parsers": {
			"@typescript-eslint/parser": [ ".ts", ".tsx" ],
		},
		"import/resolver": {
			typescript: {
				alwaysTryTypes: true,
			},
		},
		"import/ignore": [ "node_modules" ],
	},
	ignorePatterns: [
		"*.eslintrc.js",
		"*.config.js", // otherwise vscode complains about config files not being part of the project
	],
	rules: {
		// #region IMPORTS
		// "import/order" has support for this but does not work well
		"simple-import-sort/sort": [ "warn", {
			groups: [
				// Side effect imports.
				[ "^\\u0000" ],
				// Packages.
				// Things that start with a letter (or digit or underscore), or `@` followed by a letter.
				[ "^@?\\w" ],
				// Relative imports.
				// Anything that starts with a dot.
				[ "^\\.\/" ],
				// Absolute imports and other imports such as Vue-style `@/foo`.
				// Anything that does not start with a dot.
				[ "^[^.]" ],
				// Relative imports.
				// Anything that starts with a dot.
				[ "^\\..\/" ],
			],
		} ],
		"import/default": "warn",
		"import/dynamic-import-chunkname": "warn",
		"import/export": "warn",
		"import/named": "warn",
		"import/namespace": "warn",
		"import/newline-after-import": [ "warn", { count: 2 } ],
		"import/no-absolute-path": "warn",
		"import/no-anonymous-default-export": [ "warn", { allowArray: false, allowArrowFunction: true, allowAnonymousClass: true, allowAnonymousFunction: true, allowCallExpression: true, allowLiteral: false, allowObject: true } ],
		"import/no-default-export": "warn",
		"import/no-deprecated": "warn",
		"import/no-duplicates": "warn",
		"import/no-extraneous-dependencies": [ "warn", { devDependencies: false, optionalDependencies: false, peerDependencies: false } ],
		"import/no-mutable-exports": "warn",
		"import/no-named-as-default-member": "warn",
		"import/no-named-as-default": "warn",
		"import/no-named-default": "warn",
		"import/no-namespace": "warn",
		"import/no-useless-path-segments": [ "warn", { noUselessIndex: true } ],
		"import/no-webpack-loader-syntax": "warn",
		"no-duplicate-imports": [ "warn", { includeExports: false } ],
		"no-restricted-imports": [ "warn", {
			patterns: [ "../*" ],
			paths: [
				{ name: "fs", importNames: [ "default" ], message: `Please use \`import { promises as fs } from "fs"\` instead, otherwise disable this warning if sync fs functions are needed.` }
			]
		} ],
		// #regionend

		// #region STYLE - TYPESCRIPT SPECIFIC
		"@typescript-eslint/explicit-member-accessibility": [ "warn", {
			accessibility: "no-public",
			overrides: {
				parameterProperties: "off",
			},
		} ],
		"@typescript-eslint/member-delimiter-style": [ "warn", {
			multiline: {
				delimiter: "none",
				requireLast: true,
			},
			singleline: {
				delimiter: "comma",
				requireLast: false,
			},
		} ],
		"@typescript-eslint/typedef": [ "warn", {
			arrowParameter: false,
			arrayDestructuring: false,
			objectDestructuring: false,
			variableDeclaration: false,
			variableDeclarationIgnoreFunction: false,
			memberVariableDeclaration: true,
			parameter: true,
			propertyDeclaration: true,
		} ],
		"@typescript-eslint/array-type": "warn",
		"@typescript-eslint/consistent-type-assertions": "warn",
		"@typescript-eslint/consistent-type-definitions": [ "warn", "type" ],
		"@typescript-eslint/no-parameter-properties": "warn",
		"@typescript-eslint/prefer-function-type": "warn",
		// #regionend

		// #region STYLE - CLASS RELATED
		"@typescript-eslint/lines-between-class-members": [ "warn", { exceptAfterOverload: false } ],

		"@typescript-eslint/no-dupe-class-members": "warn",

		"accessor-pairs": "warn",
		"constructor-super": "warn",
		"grouped-accessor-pairs": "warn",
		// #regionend

		// #region STYLE - NAMING
		// "snakecasejs/snakecasejs": "warn",
		"@typescript-eslint/naming-convention": [ "warn",
			// { filter: "exception|exception2" }
			{ selector: "default", format: [ "snake_case" ], leadingUnderscore: "allow", trailingUnderscore: "allow" },
			{ selector: "variable", format: [ "snake_case", "UPPER_CASE" ], leadingUnderscore: "allow", trailingUnderscore: "allow" },
			{ selector: "memberLike", modifiers: [ "private" ], format: [ "snake_case" ], leadingUnderscore: "allow", trailingUnderscore: "allow" },
			// future awaiting https://github.com/typescript-eslint/typescript-eslint/issues/1712
			// allows double underscore private functions to bypass naming conventions temporarily
			{ filter: "__", selector: "memberLike", format: [ /* allow anything */ ], modifiers: [ "private" ] },
			{ selector: "memberLike", modifiers: [ "public" ], format: [ "camelCase" ] },
			{ selector: "typeLike", format: [ "PascalCase" ], leadingUnderscore: "allow", trailingUnderscore: "allow" },
			{ selector: "property", format: null, leadingUnderscore: "allow", trailingUnderscore: "allow" },
			{ selector: "enum", format: [ "UPPER_CASE" ], leadingUnderscore: "allow", trailingUnderscore: "allow" },
			{ selector: "enumMember", format: [ "UPPER_CASE", "PascalCase", "snake_case" ], leadingUnderscore: "allow", trailingUnderscore: "allow" },
			{ selector: "typeParameter", format: [ "PascalCase" ], prefix: [ "T" ] } ],
		// #regionend

		// #region STYLE - WHITESPACE
		"@typescript-eslint/indent": [ "warn", "tab", {
			SwitchCase: 1,
			ArrayExpression: "first",
			ObjectExpression: "first",
			// i"ve come to realize these are much more readable
			flatTernaryExpressions: true,
			ignoredNodes: [
				// fixes bug in typescript-eslint
				"TSTypeParameterInstantiation",
				// allows us to indent generics nicely
				"TSTypeParameter",
				// flat ternaries does not really do what i want
				"ConditionalExpression",
				// meesses with nested templates
				"TemplateLiteral > *",
				// allows first line of if to be indented
				"BinaryExpression",
			],
		} ],
		"@typescript-eslint/type-annotation-spacing": "warn",

		"@typescript-eslint/brace-style": [ "warn", "1tbs", { allowSingleLine: true } ],
		"@typescript-eslint/comma-spacing": [ "warn", { before: false, after: true } ],
		"@typescript-eslint/func-call-spacing": "warn",
		"@typescript-eslint/keyword-spacing": [ "warn", { before: true, after: true } ],
		"@typescript-eslint/space-before-function-paren": [ "warn", { anonymous: "never", asyncArrow: "always", named: "never" } ],
		"array-bracket-newline": [ "warn", "consistent" ],
		"array-bracket-spacing": [ "warn", "never", { objectsInArrays: false, arraysInArrays: false } ],
		"array-element-newline": [ "warn", "consistent" ],

		"object-curly-newline": [ "warn", { consistent: true } ],
		"object-curly-spacing": [ "warn", "always", { objectsInObjects: true, arraysInObjects: false } ],
		"object-property-newline": [ "warn", { allowAllPropertiesOnSameLine: true } ],

		"arrow-spacing": "warn",
		"computed-property-spacing": "warn",
		"function-call-argument-newline": [ "warn", "consistent" ],
		"generator-star-spacing": [ "warn", { before: false, after: true } ],
		"key-spacing": [ "warn", { afterColon: true } ],
		"newline-per-chained-call": [ "warn", { ignoreChainWithDepth: 3 } ],
		"no-mixed-spaces-and-tabs": "warn",
		"no-multiple-empty-lines": [ "warn", { max: 2, maxEOF: 1, maxBOF: 0 } ],
		"no-trailing-spaces": [ "warn", { skipBlankLines: true } ],
		"no-whitespace-before-property": "warn",
		"nonblock-statement-body-position": "warn",
		"padded-blocks": [ "warn", "never" ],
		"rest-spread-spacing": "warn",
		"semi-spacing": [ "warn", { before: false, after: true } ],
		"space-before-blocks": "warn",
		"space-in-parens": [ "warn", "never" ],
		"space-infix-ops": "warn",
		"space-unary-ops": "warn",
		"spaced-comment": "warn",
		"switch-colon-spacing": "warn",
		"template-curly-spacing": "warn",
		"template-tag-spacing": "warn",
		"yield-star-spacing": [ "warn", "after" ],
		// #regionend

		// #region STYLE - DELIMITERS / OPERATORS
		"@typescript-eslint/no-extra-semi": "warn",
		"@typescript-eslint/quotes": [ "warn", "double", { avoidEscape: false, allowTemplateLiterals: true } ],
		"@typescript-eslint/semi": [ "warn", "never" ],

		"comma-dangle": [ "warn", "always-multiline" ],
		"jsx-quotes": "warn",
		"operator-assignment": "warn",
		"prefer-template": "warn",
		"quote-props": [ "warn", "as-needed", { unnecessary: true } ],
		// #regionend

		// #region STYLE - FUNCTIONS
		"@typescript-eslint/no-array-constructor": "warn",

		"arrow-body-style": "warn",
		"arrow-parens": [ "warn", "as-needed" ],
		"no-inner-declarations": [ "warn", "both" ],
		// #endregion

		// #region STYLE - OBJECTS / ARRAYS
		"@typescript-eslint/dot-notation": "warn",

		"curly": [ "warn", "multi-line" ],
		"dot-location": [ "warn", "property" ],
		"no-new-object": "warn",
		"object-shorthand": "warn",
		// #regionend

		// #region PREFERENCE - GENERAL
		"@typescript-eslint/no-empty-function": "warn",
		"@typescript-eslint/no-throw-literal": "warn",
		"@typescript-eslint/no-unused-vars-experimental": [ "warn", { ignoreArgsIfArgsAfterAreUsed: false } ],
		"@typescript-eslint/no-unused-vars": [ "warn", { vars: "all", args: "after-used", ignoreRestSiblings: false } ],
		"@typescript-eslint/no-var-requires": "warn",
		"@typescript-eslint/prefer-for-of": "warn",
		"@typescript-eslint/prefer-readonly": "warn",

		"default-case-last": "warn",
		"eqeqeq": [ "warn", "always" ],
		"guard-for-in": "warn",
		"new-parens": "warn",
		"no-alert": "warn",
		"no-console": "warn",
		"no-debugger": "warn",
		"no-new-wrappers": "warn",
		"no-unneeded-ternary": "warn",
		"no-useless-call": "warn",
		"no-useless-computed-key": "warn",
		"no-useless-rename": "warn",
		"no-useless-return": "warn",
		"no-var": "warn",
		"no-void": "warn",
		"prefer-exponentiation-operator": "warn",
		"prefer-object-spread": "warn",
		"prefer-regex-literals": "warn",
		"prefer-rest-params": "warn",
		"prefer-spread": "warn",
		"symbol-description": "warn",
		"yoda": "warn",
		// #regionend

		// #region PREFERENCE - TYPESCRIPT SPECIFIC
		"@typescript-eslint/adjacent-overload-signatures": "warn",
		"@typescript-eslint/no-namespace": "warn",
		"@typescript-eslint/no-unnecessary-type-assertion": "warn",
		"@typescript-eslint/prefer-namespace-keyword": "warn",
		"@typescript-eslint/triple-slash-reference": "warn",
		"@typescript-eslint/unified-signatures": "warn",
		// #regionend

		// #region PREFERENCE - FILES
		"eol-last": "warn",
		"linebreak-style": [ "warn", "unix" ],
		"max-lines": [ "warn", 1000 ],
		// #regionend

		// #region UNSAFE / ERROR PRONE
		"@typescript-eslint/await-thenable": "warn",
		"@typescript-eslint/class-literal-property-style": "warn",
		"@typescript-eslint/default-param-last": "warn",
		"@typescript-eslint/explicit-function-return-type": [ "warn", { allowExpressions: true, allowTypedFunctionExpressions: true, allowHigherOrderFunctions: true } ],
		"@typescript-eslint/no-base-to-string": "warn",
		"@typescript-eslint/no-empty-interface": [ "warn", { allowSingleExtends: true } ],
		"@typescript-eslint/no-extra-non-null-assertion": "warn",
		"@typescript-eslint/no-floating-promises": [ "warn", { ignoreIIFE: true } ],
		"@typescript-eslint/no-for-in-array": "warn",
		"@typescript-eslint/no-inferrable-types": [ "warn", { ignoreParameters: true, ignoreProperties: false } ],
		"@typescript-eslint/no-misused-new": "warn",
		"@typescript-eslint/no-misused-promises": "warn",
		"@typescript-eslint/no-non-null-asserted-optional-chain": "warn",
		"@typescript-eslint/no-require-imports": "warn",
		"@typescript-eslint/no-this-alias": [ "warn", { allowDestructuring: true, allowedNames: [ "self", "context" ] } ],
		"@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
		"@typescript-eslint/no-unnecessary-qualifier": "warn",
		"@typescript-eslint/no-use-before-define": [ "warn", { functions: false, classes: true, enums: false, variables: true, typedefs: false } ], // only classes are not hoisted, eslint will still complain about the false ones if we're using the item in the same scope
		"@typescript-eslint/prefer-as-const": "warn",
		"@typescript-eslint/prefer-includes": "warn",
		"@typescript-eslint/prefer-nullish-coalescing": [ "warn", { ignoreConditionalTests: true, ignoreMixedLogicalExpressions: true } ],
		"@typescript-eslint/prefer-optional-chain": "warn",
		"@typescript-eslint/prefer-reduce-type-parameter": "warn",
		"@typescript-eslint/prefer-string-starts-ends-with": "warn",
		"@typescript-eslint/prefer-ts-expect-error": "warn",
		"@typescript-eslint/promise-function-async": "warn",
		"@typescript-eslint/restrict-plus-operands": [ "warn", { checkCompoundAssignments: true } ],
		"@typescript-eslint/restrict-template-expressions": [ "warn", { allowNumber: true, allowBoolean: true, allowAny: true } ],
		"@typescript-eslint/switch-exhaustiveness-check": "warn",
		"@typescript-eslint/unbound-method": [ "warn", { ignoreStatic: true } ],
		"@typescript-eslint/require-await": "warn",
		"@typescript-eslint/no-implied-eval": "warn",
		"@typescript-eslint/no-invalid-this": "warn",
		"@typescript-eslint/return-await": "warn",
		"@typescript-eslint/no-unused-expressions": [ "warn", { allowTernary: true } ],

		"block-scoped-var": "warn",
		"for-direction": "warn",
		"getter-return": "warn",
		"no-async-promise-executor": "warn",
		"no-await-in-loop": "warn",
		"no-bitwise": "warn",
		"no-caller": "warn",
		"no-case-declarations": "warn", // no vars not inside brackets in switch statements
		"no-class-assign": "warn",
		"no-compare-neg-zero": "warn",
		"no-cond-assign": "warn",
		"no-const-assign": "warn",
		"no-constant-condition": "warn",
		"no-constructor-return": "warn",
		"no-control-regex": "warn",
		"no-delete-var": "warn",
		"no-dupe-args": "warn",
		"no-dupe-else-if": "warn",
		"no-dupe-keys": "warn",
		"no-duplicate-case": "warn",
		"no-empty-character-class": "warn",
		"no-empty-pattern": "warn",
		"no-empty": "warn",
		"no-eq-null": "warn",
		"no-eval": "warn",
		"no-ex-assign": "warn",
		"no-extend-native": "warn",
		"no-extra-bind": "warn",
		"no-extra-boolean-cast": "warn",
		"no-fallthrough": "warn",
		"no-floating-decimal": "warn",
		"no-func-assign": "warn",
		"no-global-assign": "warn",
		"no-implicit-globals": "warn",
		"no-import-assign": "warn",
		"no-invalid-regexp": "warn",
		"no-irregular-whitespace": "warn",
		"no-iterator": "warn",
		"no-label-var": "warn",
		"no-labels": "warn",
		"no-lone-blocks": "warn",
		"no-loop-func": "warn",
		"no-misleading-character-class": "warn",
		"no-mixed-operators": "warn",
		"no-multi-spaces": "warn",
		"no-new-func": "warn",
		"no-new-symbol": "warn",
		"no-new": "warn",
		"no-obj-calls": "warn",
		"no-octal-escape": "warn",
		"no-octal": "warn",
		"no-proto": "warn",
		"no-prototype-builtins": "warn",
		"no-redeclare": "warn",
		"no-regex-spaces": "warn",
		"no-script-url": "warn",
		"no-self-assign": "warn",
		"no-self-compare": "warn",
		"no-sequences": "warn",
		"no-setter-return": "warn",
		"no-shadow-restricted-names": "warn",
		"no-shadow": [ "warn", { hoist: "all" } ],
		"no-sparse-arrays": "warn",
		"no-template-curly-in-string": "warn",
		"no-this-before-super": "warn",
		"no-undef-init": "warn",
		"no-undef": "warn",
		"no-unexpected-multiline": "warn",
		"no-unmodified-loop-condition": "warn",
		"no-unreachable": "warn",
		"no-unsafe-finally": "warn",
		"no-unsafe-negation": "warn",
		"no-unused-labels": "warn",
		"no-useless-catch": "warn",
		"no-useless-escape": "warn",
		"no-with": "warn",
		"prefer-numeric-literals": "warn",
		"prefer-promise-reject-errors": [ "warn", { allowEmptyReject: true } ],
		"radix": "warn",
		"require-yield": "warn",
		"use-isnan": "warn",
		"valid-typeof": "warn",
		"wrap-iife": [ "warn", "inside", { functionPrototypeMethods: true } ],
		// #regionend

		// #region UNUSED
		// useful for checking if I've missed any new rules, if these are all uncommented and off and all the extends are set to their max values (e.g. esling:all), using the print script will show any unused rules at the bottom of the rules list and we can extract them like:
		// npm run print | grep -A10000 "wrap-regex"
		// or the name of the last rule here
		// note: the import plugin does not have an extend that exports all the rules

		// // #region INTERFERE WITH TYPESCRIPT
		// "brace-style": "off",
		// "comma-spacing": "off",
		// "dot-notation": "off",
		// "func-call-spacing": "off",
		// "keyword-spacing": "off",
		// "no-dupe-class-members": "off",
		// "no-extra-semi": "off",
		// "no-implied-eval": "off",
		// "no-invalid-this": "off",
		// "no-return-await": "off",
		// "no-throw-literal": "off",
		// "no-unused-expressions": "off",
		// "no-unused-vars": "off",
		// "no-use-before-define": "off",
		// "quotes": "off",
		// "require-await": "off",
		// "semi": "off",
		// "space-before-function-paren": "off",
		// // #regionend

		// "@typescript-eslint/ban-ts-comment": "off",
		// "@typescript-eslint/ban-ts-ignore": "off",
		// "@typescript-eslint/ban-types": "off",
		// "@typescript-eslint/camelcase": "off",
		// "@typescript-eslint/class-name-casing": "off",
		// "@typescript-eslint/explicit-module-boundary-types": "off", // not needed, explicit-function-return-type is on
		// "@typescript-eslint/init-declarations": "off",
		// "@typescript-eslint/interface-name-prefix": "off",
		// "@typescript-eslint/member-ordering": "off",
		// "@typescript-eslint/method-signature-style": "off",
		// "@typescript-eslint/no-dynamic-delete": "off",
		// "@typescript-eslint/no-explicit-any": "off",
		// "@typescript-eslint/no-extra-parens": "off",
		// "@typescript-eslint/no-extraneous-class": "off",
		// "@typescript-eslint/no-invalid-void-type": "off",
		// "@typescript-eslint/no-magic-numbers": "off",
		// "@typescript-eslint/no-non-null-assertion": "off",
		// "@typescript-eslint/no-type-alias": "off",
		// "@typescript-eslint/no-unnecessary-condition": "off",
		// "@typescript-eslint/no-unnecessary-type-arguments": "off",
		// "@typescript-eslint/no-unsafe-assignment": "off",
		// "@typescript-eslint/no-unsafe-call": "off",
		// "@typescript-eslint/no-unsafe-member-access": "off",
		// "@typescript-eslint/no-unsafe-return": "off",
		// "@typescript-eslint/no-useless-constructor": "off",
		// "@typescript-eslint/prefer-readonly-parameter-types": "off", // getting weird false positives
		// "@typescript-eslint/prefer-regexp-exec": "off",
		// "@typescript-eslint/require-array-sort-compare": "off",
		// "@typescript-eslint/strict-boolean-expressions": "off",
		// "array-callback-return": "off",
		// "block-spacing": "off",
		// "camelcase": "off",
		// "capitalized-comments": "off",
		// "class-methods-use-this": "off",
		// "comma-style": "off",
		// "complexity": "off",
		// "consistent-return": "off",
		// "consistent-this": "off",
		// "default-case": "off",
		// "default-param-last": "off",
		// "func-name-matching": "off",
		// "func-names": "off",
		// "func-style": "off",
		// "function-paren-newline": "off",
		// "id-blacklist": "off",
		// "id-length": "off",
		// "id-match": "off",
		// "implicit-arrow-linebreak": ["off", "beside"], // too annoying in certain situations
		// "import/exports-last": "off",
		// "import/extensions": "off",
		// "import/first": "off",
		// "import/group-exports": "off",
		// "import/max-dependencies": "off",
		// "import/no-amd": "off",
		// "import/no-commonjs": "off",
		// "import/no-cycle": "off", // want but off because it complains when importing types and there's no way to whitelist them
		// "import/no-dynamic-require": "off",
		// "import/no-internal-modules": "off",
		// "import/no-named-export": "off",
		// "import/no-nodejs-modules": "off",
		// "import/no-relative-parent-imports": "off",
		// "import/no-restricted-paths": "off",
		// "import/no-self-import": "off",
		// "import/no-unassigned-import": "off",
		// "import/no-unresolved": "off", // gets annoying with custom resolve paths
		// "import/no-unused-modules": "off", // turned on manually when i want
		// "import/order": "off", // doesn't work propertly (cant tell external from internal)
		// "import/prefer-default-export": "off",
		// "import/unambiguous": "off",
		// "indent": "off",
		// "init-declarations": "off",
		// "line-comment-position": "off",
		// "lines-around-comment": "off",
		// "lines-between-class-members": "off",
		// "max-classes-per-file": "off",
		// "max-depth": "off",
		// "max-len": "off",
		// "max-lines-per-function": "off",
		// "max-nested-callbacks": "off",
		// "max-params": "off",
		// "max-statements-per-line": "off",
		// "max-statements": "off",
		// "multiline-comment-style": "off",
		// "multiline-ternary": "off",
		// "new-cap": "off",
		// "no-array-constructor": "off",
		// "no-confusing-arrow": "off",
		// "no-continue": "off",
		// "no-div-regex": "off",
		// "no-else-return": "off",
		// "no-empty-function": "off",
		// "no-extra-label": "off",
		// "no-extra-parens": "off",
		// "no-implicit-coercion": "off",
		// "no-inline-comments": "off",
		// "no-lonely-if": "off",
		// "no-magic-numbers": ["off", { ignoreArrayIndexes: true, detectObjects: true, ignore: [1]}],
		// "no-multi-assign": "warn",
		// "no-multi-str": "off",
		// "no-negated-condition": "off",
		// "no-nested-ternary": "off",
		// "no-param-reassign": "off",
		// "no-plusplus": "off",
		// "no-restricted-exports": "off",
		// "no-restricted-globals": "off",
		// "no-restricted-properties": "off",
		// "no-restricted-syntax": "off",
		// "no-return-assign": "off",
		// "no-tabs": "off",
		// "no-ternary": "off",
		// "no-undefined": "off",
		// "no-underscore-dangle": "off",
		// "no-useless-backreference": "off", // was complaining when I didn't have a backreference?
		// "no-useless-concat": "off",
		// "no-useless-constructor": "off",
		// "no-warning-comments": "off",
		// "one-var-declaration-per-line": "off",
		// "one-var": ["off", "never"],
		// "operator-linebreak": "off",
		// "padding-line-between-statements": "off",
		// "prefer-arrow-callback": "off",
		// "prefer-const": "off",
		// "prefer-destructuring": "off",
		// "prefer-named-capture-group": "off",
		// "require-atomic-updates": "off",
		// "require-unicode-regexp": "off",
		// "semi-style": "off",
		// "sort-imports": "off",
		// "sort-keys": "off",
		// "sort-vars": "off",
		// "strict": "off",
		// "unicode-bom": "off",
		// "vars-on-top": "off",
		// "wrap-regex": "off",
		// #regionend

	},
}
